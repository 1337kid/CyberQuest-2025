const express = require('express');
const { MongoClient } = require('mongodb');
const path = require('path');
const { v4: uuidv4 } = require('uuid'); 

const app = express();
const port = 3000;

const mongoUri = 'mongodb://localhost:27017';
const dbName = 'ctf_nosql_injection_chronos'; 

let db; 

const sessions = {}; 

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(express.static(__dirname));


async function connectToMongo() {
    try {
        const client = new MongoClient(mongoUri);
        await client.connect();
        db = client.db(dbName);

        console.log('Connected to MongoDB successfully!');

        const usersCollection = db.collection('users');

        const userCount = await usersCollection.countDocuments();
        if (userCount === 0) {
            console.log('Populating users collection for Chronos Timepieces...');
            await usersCollection.insertMany([
                { username: 'engineer', password: 'gear_head', role: 'guest' },
                { username: 'admin', password: 'chronos_master_key_42', role: 'admin' }, // The target admin user
                { username: 'sales', password: 'client_relations', role: 'guest' }
            ]);
            console.log('Chronos users populated.');
        } else {
            console.log('Chronos users collection already populated.');
        }

        

    } catch (err) {
        console.error('Failed to connect to MongoDB or populate data for Chronos:', err);
        process.exit(1);
    }
}


app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});


app.get('/login', (req, res) => {
    res.sendFile(path.join(__dirname, 'login.html'));
});


app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    if (!username || !password) {
        return res.status(400).json({ message: 'Username and password are required.' });
    }

    console.log(`Login attempt for Chronos: username=${username}, password=${JSON.stringify(password)}`); 

    try {
        const usersCollection = db.collection('users');

        const user = await usersCollection.findOne({ username: username, password: password });

        if (user) {
            console.log(`User '${username}' logged in successfully to Chronos.`);
            let sessionId = null;
            if (user.role === 'admin') {
                sessionId = uuidv4(); 
                sessions[sessionId] = { username: user.username, role: user.role }; 
                console.log(`Chronos Admin session created: ${sessionId}`);
            }
            
            res.json({ message: 'Login successful!', user: { username: user.username, role: user.role }, session_id: sessionId });
        } else {
            console.log(`Login failed for Chronos username: ${username}.`);
            res.status(401).json({ message: 'Invalid username or password.' });
        }
    } catch (err) {
        console.error('Error during Chronos login:', err);
        res.status(500).json({ message: 'An internal server error occurred.' });
    }
});


app.get('/admin', async (req, res) => {
    const sessionId = req.query.session_id;

    if (!sessionId || !sessions[sessionId] || sessions[sessionId].role !== 'admin') {
        console.log(`Unauthorized access attempt to Chronos /admin with session ID: ${sessionId}`);
        return res.status(403).json({ message: 'Access denied. Please log in as an administrator.' });
    }

    console.log(`Chronos Admin user '${sessions[sessionId].username}' accessing admin panel.`);
    res.sendFile(path.join(__dirname, 'admin_panel.html'));
});


app.get('/flag', async (req, res) => {
    res.set('Content-Type', 'text/plain'); 
    return res.send('cyberQuest{y0u_4r3_n07_4dm1n_y37_K33p_7ry1ng!}'); 
});


app.listen(port, async () => {
    await connectToMongo();
    console.log(`Chronos Timepieces CTF Challenge server listening at http://localhost:${port}`);
    console.log(`Access the website at http://localhost:${port}`);
});
